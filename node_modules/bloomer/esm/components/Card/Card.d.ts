/// <reference types="react" />
import * as React from 'react';
import { Bulma } from './../../bulma';
export interface Card<T> extends Bulma.Tag, React.HTMLProps<T> {
}
export declare function Card({tag, ...props}: Card<HTMLElement>): React.DetailedReactHTMLElement<{
    className: string;
    accept?: string;
    acceptCharset?: string;
    action?: string;
    allowFullScreen?: boolean;
    allowTransparency?: boolean;
    alt?: string;
    async?: boolean;
    autocomplete?: string;
    autoFocus?: boolean;
    autoPlay?: boolean;
    capture?: boolean;
    cellPadding?: string | number;
    cellSpacing?: string | number;
    charSet?: string;
    challenge?: string;
    checked?: boolean;
    cite?: string;
    classID?: string;
    cols?: number;
    colSpan?: number;
    content?: string;
    controls?: boolean;
    coords?: string;
    crossOrigin?: string;
    data?: string;
    dateTime?: string;
    default?: boolean;
    defer?: boolean;
    disabled?: boolean;
    download?: any;
    encType?: string;
    form?: string;
    formAction?: string;
    formEncType?: string;
    formMethod?: string;
    formNoValidate?: boolean;
    formTarget?: string;
    frameBorder?: string | number;
    headers?: string;
    height?: string | number;
    high?: number;
    href?: string;
    hrefLang?: string;
    htmlFor?: string;
    httpEquiv?: string;
    integrity?: string;
    keyParams?: string;
    keyType?: string;
    kind?: string;
    label?: string;
    list?: string;
    loop?: boolean;
    low?: number;
    manifest?: string;
    marginHeight?: number;
    marginWidth?: number;
    max?: string | number;
    maxLength?: number;
    media?: string;
    mediaGroup?: string;
    method?: string;
    min?: string | number;
    minLength?: number;
    multiple?: boolean;
    muted?: boolean;
    name?: string;
    nonce?: string;
    noValidate?: boolean;
    open?: boolean;
    optimum?: number;
    pattern?: string;
    placeholder?: string;
    playsInline?: boolean;
    poster?: string;
    preload?: string;
    readOnly?: boolean;
    rel?: string;
    required?: boolean;
    reversed?: boolean;
    rows?: number;
    rowSpan?: number;
    sandbox?: string;
    scope?: string;
    scoped?: boolean;
    scrolling?: string;
    seamless?: boolean;
    selected?: boolean;
    shape?: string;
    size?: number;
    sizes?: string;
    span?: number;
    src?: string;
    srcDoc?: string;
    srcLang?: string;
    srcSet?: string;
    start?: number;
    step?: string | number;
    summary?: string;
    target?: string;
    type?: string;
    useMap?: string;
    value?: string | number | string[];
    width?: string | number;
    wmode?: string;
    wrap?: string;
    defaultChecked?: boolean;
    defaultValue?: string | string[];
    suppressContentEditableWarning?: boolean;
    accessKey?: string;
    contentEditable?: boolean;
    contextMenu?: string;
    dir?: string;
    draggable?: boolean;
    hidden?: boolean;
    id?: string;
    lang?: string;
    slot?: string;
    spellCheck?: boolean;
    style?: React.CSSProperties;
    tabIndex?: number;
    title?: string;
    inputMode?: string;
    is?: string;
    radioGroup?: string;
    role?: string;
    about?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    resource?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: boolean;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    };
    onCopy?: React.EventHandler<React.ClipboardEvent<HTMLElement>>;
    onCopyCapture?: React.EventHandler<React.ClipboardEvent<HTMLElement>>;
    onCut?: React.EventHandler<React.ClipboardEvent<HTMLElement>>;
    onCutCapture?: React.EventHandler<React.ClipboardEvent<HTMLElement>>;
    onPaste?: React.EventHandler<React.ClipboardEvent<HTMLElement>>;
    onPasteCapture?: React.EventHandler<React.ClipboardEvent<HTMLElement>>;
    onCompositionEnd?: React.EventHandler<React.CompositionEvent<HTMLElement>>;
    onCompositionEndCapture?: React.EventHandler<React.CompositionEvent<HTMLElement>>;
    onCompositionStart?: React.EventHandler<React.CompositionEvent<HTMLElement>>;
    onCompositionStartCapture?: React.EventHandler<React.CompositionEvent<HTMLElement>>;
    onCompositionUpdate?: React.EventHandler<React.CompositionEvent<HTMLElement>>;
    onCompositionUpdateCapture?: React.EventHandler<React.CompositionEvent<HTMLElement>>;
    onFocus?: React.EventHandler<React.FocusEvent<HTMLElement>>;
    onFocusCapture?: React.EventHandler<React.FocusEvent<HTMLElement>>;
    onBlur?: React.EventHandler<React.FocusEvent<HTMLElement>>;
    onBlurCapture?: React.EventHandler<React.FocusEvent<HTMLElement>>;
    onChange?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onChangeCapture?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onInput?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onInputCapture?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onReset?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onResetCapture?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onSubmit?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onSubmitCapture?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onInvalid?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onInvalidCapture?: React.EventHandler<React.FormEvent<HTMLElement>>;
    onLoad?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onLoadCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onError?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onErrorCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onKeyDown?: React.EventHandler<React.KeyboardEvent<HTMLElement>>;
    onKeyDownCapture?: React.EventHandler<React.KeyboardEvent<HTMLElement>>;
    onKeyPress?: React.EventHandler<React.KeyboardEvent<HTMLElement>>;
    onKeyPressCapture?: React.EventHandler<React.KeyboardEvent<HTMLElement>>;
    onKeyUp?: React.EventHandler<React.KeyboardEvent<HTMLElement>>;
    onKeyUpCapture?: React.EventHandler<React.KeyboardEvent<HTMLElement>>;
    onAbort?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onAbortCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onCanPlay?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onCanPlayCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onCanPlayThrough?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onCanPlayThroughCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onDurationChange?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onDurationChangeCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onEmptied?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onEmptiedCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onEncrypted?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onEncryptedCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onEnded?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onEndedCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onLoadedData?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onLoadedDataCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onLoadedMetadata?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onLoadedMetadataCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onLoadStart?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onLoadStartCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onPause?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onPauseCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onPlay?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onPlayCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onPlaying?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onPlayingCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onProgress?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onProgressCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onRateChange?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onRateChangeCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onSeeked?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onSeekedCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onSeeking?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onSeekingCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onStalled?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onStalledCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onSuspend?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onSuspendCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onTimeUpdate?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onTimeUpdateCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onVolumeChange?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onVolumeChangeCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onWaiting?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onWaitingCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onClick?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onClickCapture?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onContextMenu?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onContextMenuCapture?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onDoubleClick?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onDoubleClickCapture?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onDrag?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragCapture?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragEnd?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragEndCapture?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragEnter?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragEnterCapture?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragExit?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragExitCapture?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragLeave?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragLeaveCapture?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragOver?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragOverCapture?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragStart?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDragStartCapture?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDrop?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onDropCapture?: React.EventHandler<React.DragEvent<HTMLElement>>;
    onMouseDown?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseDownCapture?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseEnter?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseLeave?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseMove?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseMoveCapture?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseOut?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseOutCapture?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseOver?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseOverCapture?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseUp?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onMouseUpCapture?: React.EventHandler<React.MouseEvent<HTMLElement>>;
    onSelect?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onSelectCapture?: React.EventHandler<React.SyntheticEvent<HTMLElement>>;
    onTouchCancel?: React.EventHandler<React.TouchEvent<HTMLElement>>;
    onTouchCancelCapture?: React.EventHandler<React.TouchEvent<HTMLElement>>;
    onTouchEnd?: React.EventHandler<React.TouchEvent<HTMLElement>>;
    onTouchEndCapture?: React.EventHandler<React.TouchEvent<HTMLElement>>;
    onTouchMove?: React.EventHandler<React.TouchEvent<HTMLElement>>;
    onTouchMoveCapture?: React.EventHandler<React.TouchEvent<HTMLElement>>;
    onTouchStart?: React.EventHandler<React.TouchEvent<HTMLElement>>;
    onTouchStartCapture?: React.EventHandler<React.TouchEvent<HTMLElement>>;
    onScroll?: React.EventHandler<React.UIEvent<HTMLElement>>;
    onScrollCapture?: React.EventHandler<React.UIEvent<HTMLElement>>;
    onWheel?: React.EventHandler<React.WheelEvent<HTMLElement>>;
    onWheelCapture?: React.EventHandler<React.WheelEvent<HTMLElement>>;
    onAnimationStart?: React.EventHandler<React.AnimationEvent<HTMLElement>>;
    onAnimationStartCapture?: React.EventHandler<React.AnimationEvent<HTMLElement>>;
    onAnimationEnd?: React.EventHandler<React.AnimationEvent<HTMLElement>>;
    onAnimationEndCapture?: React.EventHandler<React.AnimationEvent<HTMLElement>>;
    onAnimationIteration?: React.EventHandler<React.AnimationEvent<HTMLElement>>;
    onAnimationIterationCapture?: React.EventHandler<React.AnimationEvent<HTMLElement>>;
    onTransitionEnd?: React.EventHandler<React.TransitionEvent<HTMLElement>>;
    onTransitionEndCapture?: React.EventHandler<React.TransitionEvent<HTMLElement>>;
    ref?: React.Ref<HTMLElement>;
    key?: string | number;
}, HTMLElement>;
declare const HOC: React.StatelessComponent<Card<HTMLElement> & React.HTMLProps<HTMLElement> & Bulma.Helpers>;
export default HOC;
